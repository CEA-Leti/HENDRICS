# Copyright (C) 2025 CEA - All Rights Reserved
# 
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

from concurrent.futures import ThreadPoolExecutor
from threading import Lock
import subprocess
import time
import re

from flask import Flask, request, render_template
from flask_socketio import SocketIO
from werkzeug.serving import WSGIRequestHandler

app = Flask(__name__)

def get_ip_address():
    try:
        result = subprocess.run(['ip', 'addr'], capture_output=True, text=True)
        output = result.stdout
        # Trouver l'adresse IP dans la sortie
        lines = output.split('\n')
        for line in lines:
            if 'inet ' in line and '127.0.0.1' not in line:
                parts = line.split()
                for part in parts:
                    if '.' in part:
                        return part[:-3]
    except Exception as e:
        print("Error while executing the command ip addr :", e)
        return None

def changeSocketIP(nouvelle_adresse_ip):
   
    chemin_fichier_html = "templates/index.html"

    with open(chemin_fichier_html, "r") as fichier_html:
        contenu_html = fichier_html.read()

    pattern = r"const socket = io.connect\('.*?'\);"
    contenu_html_modifie = re.sub(pattern, f"const socket = io.connect('http://{nouvelle_adresse_ip}:5000');", contenu_html)

    with open(chemin_fichier_html, "w") as fichier_html:
        fichier_html.write(contenu_html_modifie)

changeSocketIP(get_ip_address())
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')
executor = ThreadPoolExecutor(1)
counter_lock = Lock()
counter=0

def readRedisMessage():
    while True:
        time.sleep(0.1)
        with counter_lock:
            socketio.emit('Counter_value', {'message': counter}, namespace='/')


executor.submit(readRedisMessage)


@app.route('/', methods=['GET', 'POST'])
def index():
    global counter
    with counter_lock:
        counter += 1
    return render_template('index.html')


if __name__ == '__main__':
    app.run(debug=True)
